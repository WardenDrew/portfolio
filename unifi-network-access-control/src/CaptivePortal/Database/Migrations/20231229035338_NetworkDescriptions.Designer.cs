// <auto-generated />
using System;
using CaptivePortal.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CaptivePortal.Database.Migrations
{
    [DbContext(typeof(IronNacDbContext))]
    [Migration("20231229035338_NetworkDescriptions")]
    partial class NetworkDescriptions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CaptivePortal.Database.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountingSessionId")
                        .HasColumnType("text");

                    b.Property<bool>("Authorized")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AuthorizedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CallingStationId")
                        .HasColumnType("text");

                    b.Property<string>("DetectedDeviceIpAddress")
                        .HasColumnType("text");

                    b.Property<string>("DeviceMac")
                        .HasColumnType("text");

                    b.Property<string>("NasIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("NasIpAddress")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.DeviceNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.HasIndex("NetworkId");

                    b.ToTable("DeviceNetworks");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GatewayAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NetworkAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NetworkGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("Vlan")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NetworkGroupId");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.NetworkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Guest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPool")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Registration")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("NetworkGroups");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ChangePasswordNextLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.UserNetworkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("NetworkGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NetworkGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNetworkGroups");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RefreshTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RefreshTokenIssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.Device", b =>
                {
                    b.HasOne("CaptivePortal.Database.Entities.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.DeviceNetwork", b =>
                {
                    b.HasOne("CaptivePortal.Database.Entities.Device", "Device")
                        .WithOne("DeviceNetwork")
                        .HasForeignKey("CaptivePortal.Database.Entities.DeviceNetwork", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaptivePortal.Database.Entities.Network", "Network")
                        .WithMany("DeviceNetworks")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.Network", b =>
                {
                    b.HasOne("CaptivePortal.Database.Entities.NetworkGroup", "NetworkGroup")
                        .WithMany("Networks")
                        .HasForeignKey("NetworkGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NetworkGroup");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.UserNetworkGroup", b =>
                {
                    b.HasOne("CaptivePortal.Database.Entities.NetworkGroup", "NetworkGroup")
                        .WithMany("UserNetworkGroups")
                        .HasForeignKey("NetworkGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaptivePortal.Database.Entities.User", "User")
                        .WithMany("UserNetworkGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NetworkGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.UserSession", b =>
                {
                    b.HasOne("CaptivePortal.Database.Entities.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.Device", b =>
                {
                    b.Navigation("DeviceNetwork")
                        .IsRequired();
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.Network", b =>
                {
                    b.Navigation("DeviceNetworks");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.NetworkGroup", b =>
                {
                    b.Navigation("Networks");

                    b.Navigation("UserNetworkGroups");
                });

            modelBuilder.Entity("CaptivePortal.Database.Entities.User", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("UserNetworkGroups");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
