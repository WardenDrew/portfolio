@using CaptivePortal.Components.Forms
@using CaptivePortal.Database.Entities
@using System.Net
@using CaptivePortal.Helpers
@inject IDbContextFactory<IronNacDbContext> dbFactory

@if (User is not null)
{
    <form class="d-block w-100" @onsubmit="async _ => await Submit()">
        <h5 class="mt-3 mb-1">Email Address</h5>
        @if (emailAddressValidation is not null)
        {
            <div class="alert alert-danger">@emailAddressValidation</div>
        }
        <label class="d-block">The user&apos;s Email Address in user@domain format.</label>
        <input class="d-block w-100" type="text" @bind="User.Email" @ref="emailField">

        <h5 class="mt-3 mb-1">Name</h5>
        <input class="d-block w-100" type="text" @bind="User.Name" />

        <h5 class="mt-3 mb-1">Permission Level</h5>
        <select class="form-select" @bind="User.PermissionLevel">
            <option value="@PermissionLevel.User">User - Can select from their assigned networks</option>
            <option value="@PermissionLevel.Moderator">Moderator - Can manage guest devices</option>
            <option value="@PermissionLevel.Admin">Admin - Can manage all aspects of the software</option>
        </select>

        <h5 class="mt-3 mb-1">Password</h5>
        @if (passwordValidation is not null)
        {
            <div class="alert alert-danger">@passwordValidation</div>
        }

        <div class="mb-2 form-check form-switch d-flex align-items-center">
            <input type="checkbox" class="form-check-input" style="padding: 12px 24px;" role="switch" @bind="User.ChangePasswordNextLogin" />
            <label class="form-check-label ms-2">User Must Reset</label>
        </div>

        @if (CreatingNew || changePassword)
        {
            <div class="mb-2 form-check form-switch d-flex align-items-center">
                <input type="checkbox" class="form-check-input" style="padding: 12px 24px;" role="switch" @bind="generatePassword" />
                <label class="form-check-label ms-2">Generate Password</label>
            </div>
            
            @if (!generatePassword)
            {
                <input class="d-block w-100" type="password" @bind="setPassword" autocomplete="new-password" />
            }
            else
            {
                <div class="d-flex">
                    <button class="btn btn-outline-info me-1" type="button">
                        <span class="mdi mdi-content-copy"></span>
                    </button>
                    <input class="flex-grow-1 d-block w-100" type="text" @bind="setPassword" disabled />
                </div>
            }
        }
        else
        {
            <div class="mb-2 form-check form-switch d-flex align-items-center">
                <input type="checkbox" class="form-check-input" style="padding: 12px 24px;" role="switch" @bind="changePassword" />
                <label class="form-check-label ms-2">Change Password</label>
            </div>
        }

        <h5 class="mt-3">Available Network Groups</h5>
        <ul class="list-group">
            @if (!networkGroups.Any())
            {
                <li class="list-group-item">No Non-Registration Network Groups Available</li>
            }

            @foreach(KeyValuePair<NetworkGroup, bool> kvp in networkGroups)
            {
                <li class="list-group-item">
                    <div class="mb-2 form-check form-switch d-flex align-items-center">
                        <input type="checkbox" class="form-check-input" style="padding: 12px 24px;" role="switch" 
                            @onchange="@(e => UserNetworkGroupToggled(kvp.Key, (bool)(e.Value ?? false)))" 
                            checked="@(kvp.Value)"/>
                        <label class="form-check-label ms-2">@kvp.Key.Name</label>
                    </div>
                </li>
            }
        </ul>

        <div class="d-flex justify-content-between mt-3">
            @if (OnDelete.HasDelegate)
            {
                <div>
                    <button class="d-block btn btn-danger" type="button" @onclick="async _ => await ResetFocus(OnDelete)">Delete</button>
                </div>
            }
            <div class="flex-grow-1 d-flex justify-content-end">
                <button class="d-block btn btn-primary" type="submit">Save</button>
                @if (OnCancel.HasDelegate)
                {
                    <button class="d-block btn btn-outline-secondary ms-2" type="button" @onclick="async _ => await ResetFocus(OnCancel)">Cancel</button>
                }
            </div>
        </div>
        
    </form>
}

@code {
    [Parameter]
    public User? User { get; set; }

    [Parameter]
    public bool CreatingNew { get; set; }

    [Parameter] 
    public EventCallback<EditUserSubmitModel> OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    private Dictionary<NetworkGroup, bool> networkGroups = new();

    private ElementReference emailField; 
    private bool didFocusFirstField;

    private bool changePassword = false;
    private bool generatePassword = true;
    private string? setPassword;

    private string? emailAddressValidation;
    private string? passwordValidation;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (User is not null &&
            didFocusFirstField == false)
        {
            didFocusFirstField = true;
            await emailField.FocusAsync();
        }

        if (!firstRender) return;

        if (CreatingNew)
        {
            setPassword = TemporaryPassword.Generate();
        }

        await Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Refresh()
    {
        if (User is null) return; 

        using IronNacDbContext db = await dbFactory.CreateDbContextAsync();

        List<NetworkGroup> allNetworkGroups = await db.NetworkGroups
            .Where(x => !x.Registration)
            .ToListAsync();

        List<int> existingAssignments = new();
        if (!CreatingNew)
        {
            existingAssignments = await db.UserNetworkGroups
                .Where(x => x.UserId == User.Id)
                .Select(x => x.NetworkGroupId)
                .ToListAsync();
        }

        foreach (NetworkGroup networkGroup in allNetworkGroups)
        {
            bool assigned = !CreatingNew && existingAssignments.Contains(networkGroup.Id);
            networkGroups.Add(networkGroup, assigned);
        }
    }

    private void UserNetworkGroupToggled(NetworkGroup networkGroup, bool value)
    {
        if (User is null) return;

        networkGroups[networkGroup] = value;

        StateHasChanged();
    }

    private async Task Submit()
    {
        if (User is null) return;

        if (!ValidatePassword())
        {
            return;
        }

        EditUserSubmitModel result = new()
        {
            User = User,
            NetworkGroups = networkGroups
        };

        if (CreatingNew || changePassword)
        {
            result.Password = setPassword;
        }

        didFocusFirstField = false;
        await OnSubmit.InvokeAsync(result);
    }

    private bool ValidatePassword()
    {
        if (!(CreatingNew || changePassword))
        {
            passwordValidation = null;
            return true;
        }

        if (string.IsNullOrWhiteSpace(setPassword))
        {
            passwordValidation = "Password must not be empty!";
            return false;
        }

        if (setPassword.Length < 8)
        {
            passwordValidation = "Password must be at least 8 characters!";
            return false;
        }

        passwordValidation = null;
        return true;
    }

    private async Task ResetFocus(EventCallback callback)
    {
        didFocusFirstField = false;

        await callback.InvokeAsync();
    }
}
