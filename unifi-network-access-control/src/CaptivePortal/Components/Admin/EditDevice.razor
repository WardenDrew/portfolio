@using CaptivePortal.Components.Forms
@using CaptivePortal.Database.Entities
@using System.Net
@inject IDbContextFactory<IronNacDbContext> dbFactory

@if (Device is not null)
{
    <form class="d-block w-100" @onsubmit="async _ => await Submit()">
        <h5 class="mt-3">MAC Address</h5>
        @if (macAddressValidation is not null)
        {
            <div class="alert alert-danger">@macAddressValidation</div>
        }
        <label class="d-block">The mac address in aa:bb:cc:dd:ee format.</label>
        <input class="d-block w-100" type="text" @bind="Device.DeviceMac" disabled="@(!CreatingNew)" @ref="macField">
        
        <h5>Nickname</h5>
        <input class="d-block w-100" type="text" @bind="Device.NickName" @ref="nickNameField" />

        <div class="px-3">
            @if (selectedNetworkGroup is null ||
                      (!selectedNetworkGroup.IsPool && selectedNetwork is null))
            {
                <h5 class="text-center mt-3 mb-0">Select Network</h5>

                <div class="mt-2 form-check form-switch d-flex align-items-center">
                    <input type="checkbox" class="form-check-input" style="padding: 12px 24px;" role="switch" @bind="authorizeForever"/>
                    <label class="form-check-label ms-2">Authorize Forever</label>
                </div>

                <NetworkSelection 
                    ShowAllNetworks="true"
                    SelectedNetworkGroupChanged="SelectedNetworkGroupChanged"
                    SelectedNetworkChanged="SelectedNetworkChanged"
                />
            }
            else
            {
                <p class="mt-3">
                    Network Group: <code>@selectedNetworkGroup.Name</code><br/>
                    Network: <code>@selectedNetwork?.Name</code>
                </p>
                <button class="d-block w-100 btn btn-info" type="button" @onclick="@(_ => StartChangeNetwork())">Change Network</button>
            }
        </div>

        <div class="d-flex justify-content-end mt-3">
            <button class="d-block btn btn-primary" type="submit">Save</button>
            @if (OnCancel.HasDelegate)
            {
                <button class="d-block btn btn-outline-secondary ms-2" type="button" @onclick="async _ => await ResetFocus(OnCancel)">Cancel</button>
            }
        </div>
        
    </form>
}

@code {
    [Parameter]
    public Device? Device { get; set; }

    [Parameter]
    public bool CreatingNew { get; set; }

    [Parameter] 
    public EventCallback<EditDeviceSubmitModel> OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private ElementReference macField; 
    private ElementReference nickNameField;
    private bool didFocusFirstField;

    private NetworkGroup? selectedNetworkGroup;
    private Network? selectedNetwork;
    private bool authorizeForever;

    private string? macAddressValidation;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Device is not null &&
            didFocusFirstField == false)
        {
            didFocusFirstField = true;
            if (CreatingNew)
            {
                await macField.FocusAsync();
            }
            else
            {
                await nickNameField.FocusAsync();
            }
        }

        if (!firstRender) return;

        if (!CreatingNew)
        {
            await LoadNetworkInfo();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadNetworkInfo()
    {
        if (Device is null) return;

        using IronNacDbContext db = await dbFactory.CreateDbContextAsync();

        selectedNetwork = await db.DeviceNetworks
            .Where(x => x.Id == Device.DeviceNetwork.Id)
            .Select(x => x.Network)
            .FirstOrDefaultAsync();
        if (selectedNetwork is null) return;

        selectedNetworkGroup = await db.Networks
            .Where(x => x.Id == selectedNetwork.Id)
            .Select(x => x.NetworkGroup)
            .FirstOrDefaultAsync();
        if (selectedNetworkGroup is null)
        {
            selectedNetwork = null;
            return;
        }

        authorizeForever = (Device.Authorized && (Device.AuthorizedUntil is null));
    }

    private void StartChangeNetwork()
    {
        this.selectedNetwork = null;
        this.selectedNetworkGroup = null;
        StateHasChanged();
    }

    private void SelectedNetworkGroupChanged(NetworkGroup? networkGroup)
    {
        this.selectedNetworkGroup = networkGroup;
        StateHasChanged();
    }

    private void SelectedNetworkChanged(Network? network)
    {
        this.selectedNetwork = network;
        StateHasChanged();
    }

    private async Task Submit()
    {
        if (Device is null || selectedNetworkGroup is null) return;

        if (CreatingNew) ValidateMacAddress();

        EditDeviceSubmitModel result = new()
        {
            Device = Device,
            NetworkGroup = selectedNetworkGroup,
            Network = selectedNetwork,
            AuthorizeForever = authorizeForever
        };

        didFocusFirstField = false;
        await OnSubmit.InvokeAsync(result);
    }

    private void ValidateMacAddress()
    {
        if (Device is null) return;

        if (!System.Net.NetworkInformation.PhysicalAddress.TryParse(Device.DeviceMac, out _))
        {
            macAddressValidation = "Invalid Format";
            return;
        }

        macAddressValidation = null;
    }
    
    private async Task ResetFocus(EventCallback callback)
    {
        didFocusFirstField = false;

        await callback.InvokeAsync();
    }
}
