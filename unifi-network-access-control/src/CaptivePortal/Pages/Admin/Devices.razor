@page "/admin/devices"
@layout AdminLayout
@inject RadiusDisconnectorService disconnector
@inject IDbContextFactory<IronNacDbContext> dbFactory
@inject DataRefreshNotificationService dataRefresh
@inject RadiusDisconnectorService disconnector

<PageTitle>Admin > Devices</PageTitle>

<div class="container-sm" style="max-width: 720px;">
    <h1 class="text-center mt-sm-4">Devices</h1>

    <hr />

    @if (newDevice is not null)
    {
        <div class="card p-3 mt-4">
            <h3 class="text-center">New Device</h3>
            <EditDevice Device="newDevice"
                CreatingNew="true"
                OnSubmit="CreateDevice" 
                OnCancel="@(_ => newDevice = null)"/>
        </div>
    }
    else if (editDevice is not null)
    {
        <div class="card p-3 mt-4">
            <h3 class="text-center">Edit Device</h3>
            <EditDevice
                Device="editDevice"
                CreatingNew="false"
                OnSubmit="UpdateDevice"
                OnCancel="@(_ => editDevice = null)" />
        </div>
    }
    else
    {
        <div class="d-flex flex-column flex-sm-row justify-content-center">
            <form class="flex-grow-1 d-flex flex-column flex-sm-row" @onsubmit="@(async _ => await DoSearch())">
                <input class="flex-grow-1" type="search" @bind="search"/>
                <button class="btn btn-success ms-0 ms-sm-2 mt-2 mt-sm-0">Search</button>
            </form>
            <button class="btn btn-primary ms-0 ms-sm-2 mt-2 mt-sm-0" @onclick="@(async _ => await NewDevice())">New Device</button>
        </div>

        <div class="d-flex flex-column align-items-center mt-5 mb-2">
            <nav>
                <ul class="pagination mb-1">
                    <li class="page-item">
                        <button class="@($"page-link{(page < 2 ? " disabled" : "")}")" disabled="@(page < 2)" @onclick="@(async _ => await PreviousPage())">
                            <span class="mdi mdi-arrow-left-thick"></span>
                        </button>
                    </li>
                    <li class="page-item active" aria-current="page">
                        <span class="page-link">@(page)</span>
                    </li>
                    <li class="page-item">
                        <button class="@($"page-link{(page >= totalPages ? " disabled" : "")}")" disabled="@(page >= totalPages)" @onclick="@(async _ => await NextPage())">
                            <span class="mdi mdi-arrow-right-thick"></span>
                        </button>
                    </li>
                </ul>
            </nav>
            <span>Showing @(Math.Min(count, ((page - 1) * take) + 1))-@(Math.Min(count, ((page - 1) * take) + take + 1)) of @(count) Devices</span>
        </div>

        @foreach (Device device in devices)
        {
            <div class="card p-3 mb-3">
                <div class="d-flex flex-column flex-sm-row justify-content-between">
                    @if (device.NickName is not null && device.UserId is not null)
                    {
                        <h3>@(userNames.GetValueOrDefault(device.UserId.Value))&apos;s @device.NickName</h3>
                    }
                    else if (device.NickName is not null)
                    {
                        <h3>@device.NickName</h3>
                    }
                    else if (device.UserId is not null)
                    {
                        <h3>@(userNames.GetValueOrDefault(device.UserId.Value))&apos;s device</h3>
                    }
                    else
                    {
                        <h3>Unnamed Device</h3>
                    }
                    <h5 class="mb-0"><code>@device.DeviceMac</code></h5>
                </div>
                <p class="my-1">
                    Detected IP: <code>@device.DetectedDeviceIpAddress</code><br />
                    Authorized: <code>@(!device.Authorized ? "Not Authorized" : device.AuthorizedUntil is null ? "Forever" : device.AuthorizedUntil.ToString())</code><br />

                    @if (device.UserId is not null)
                    {
                        <span>
                            User: <code>@userEmails.GetValueOrDefault(device.UserId.Value)</code><br />
                        </span>
                    }

                    @if (device.DeviceNetwork is not null)
                    {
                        <span>
                            Network Group: <code>@networkGroupNamesByNetworkId.GetValueOrDefault(device.DeviceNetwork.NetworkId)</code><br />
                            Network: <code>@networkNames.GetValueOrDefault(device.DeviceNetwork.NetworkId)</code><br />
                        </span>
                    }
                </p>

                <div class="d-flex flex-column flex-sm-row justify-content-end mt-2">
                    <button class="btn btn-info" @onclick="@(_ => editDevice = device)">Edit Device</button>
                    <button class="btn btn-danger ms-0 ms-sm-2 mt-2 mt-sm-0" @onclick="@(async _ => await DeleteDevice(device))">Revoke Authorization</button>
                </div>
            </div>
        }

        <div class="d-flex flex-column align-items-center mt-2">
            <nav>
                <ul class="pagination mb-1">
                    <li class="page-item">
                        <button class="@($"page-link{(page <= 1 ? " disabled" : "")}")" disabled="@(page <= 1)" @onclick="@(async _ => await PreviousPage())">
                            <span class="mdi mdi-arrow-left-thick"></span>
                        </button>
                    </li>
                    <li class="page-item active" aria-current="page">
                        <span class="page-link">@(page)</span>
                    </li>
                    <li class="page-item">
                        <button class="@($"page-link{(page >= totalPages ? " disabled" : "")}")" disabled="@(page >= totalPages)" @onclick="@(async _ => await NextPage())">
                            <span class="mdi mdi-arrow-right-thick"></span>
                        </button>
                    </li>
                </ul>
            </nav>
            <span>Showing @(Math.Min(count,((page - 1) * take) + 1))-@(Math.Min(count, ((page - 1) * take) + take + 1)) of @(count) Devices</span>
        </div>
    }
</div>

@code {
    private List<Device> devices = new();
    private Dictionary<int, string> networkGroupNamesByNetworkId = new();
    private Dictionary<int, string> networkNames = new();
    private Dictionary<int, string> userNames = new();
    private Dictionary<int, string> userEmails = new();

    private Device? newDevice;
    private Device? editDevice;

    private int page = 1;
    private int take = 10;
    private int count = 0;
    private int totalPages = 1;
    private string? search;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        dataRefresh.DeviceDetailsNotification += async (sender, eventArgs) =>
        {
            await Refresh();
            await InvokeAsync(StateHasChanged);
        };

        await Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Refresh()
    {
        using IronNacDbContext db = await dbFactory.CreateDbContextAsync();

        IQueryable<Device> query = db.Devices
            .AsNoTracking();

        if (!String.IsNullOrWhiteSpace(search))
        {
            search = search.ToLower();
            query = query
                .Where(x =>
                    (x.DeviceMac != null && x.DeviceMac.StartsWith(search)) ||
                    (x.DetectedDeviceIpAddress != null && x.DetectedDeviceIpAddress.StartsWith(search)) ||
                    (x.NickName != null && x.NickName.ToLower().Contains(search))
                );
        }

        count = await query.CountAsync();

        int skip = (page - 1) * take;
        if (skip > count) skip = count;
        totalPages = Convert.ToInt32(Math.Ceiling((float)count / (float)take));

        devices = await query
            .Include(x => x.DeviceNetwork)
            .OrderBy(x => x.DeviceMac)
            .Skip((page - 1) * take)
            .Take(take)
            .ToListAsync();

        networkGroupNamesByNetworkId = (await db.Networks
            .Select(x => new KeyValuePair<int, string>(x.Id, x.NetworkGroup.Name))
            .ToListAsync())
            .ToDictionary();

        networkNames = (await db.Networks
            .Select(x => new KeyValuePair<int, string>(x.Id, x.Name))
            .ToListAsync())
            .ToDictionary();

        userNames = (await db.Users
            .Select(x => new KeyValuePair<int, string>(x.Id, x.Name))
            .ToListAsync())
            .ToDictionary();

        userEmails = (await db.Users
            .Select(x => new KeyValuePair<int, string>(x.Id, x.Email))
            .ToListAsync())
            .ToDictionary();
    }

    private async Task DeleteDevice(Device device)
    {       
        using IronNacDbContext db = await dbFactory.CreateDbContextAsync();

        await db.Devices
            .Where(x => x.Id == device.Id)
            .ExecuteDeleteAsync();

        dataRefresh.DeviceDetailsNotify();
        dataRefresh.NetworkUsageNotify();

        await disconnector.Disconnect(device);
    }

    private async Task NewDevice()
    {
        newDevice = new Device();
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateDevice(EditDeviceSubmitModel result)
    {
        if (newDevice is null) return;

        using IronNacDbContext db = await dbFactory.CreateDbContextAsync();

        if (result.Network is null && !result.NetworkGroup.IsPool) return;
        else if (result.Network is null)
        {
            result.Network = await db.Networks
                .Where(x => x.NetworkGroupId == result.NetworkGroup.Id)
                .Where(x => x.DeviceNetworks.Count < x.Capacity)
                .FirstOrDefaultAsync();
        }
        if (result.Network is null) return;

        newDevice.Authorized = true;
        newDevice.AuthorizedUntil = result.AuthorizeForever ? null : DateTime.UtcNow.AddDays(30);

        newDevice.DeviceNetwork = new()
        {
            Device = newDevice,
            Network = result.Network
        };

        db.Add(newDevice);
        await db.SaveChangesAsync();

        newDevice = null;

        dataRefresh.DeviceDetailsNotify();
        dataRefresh.NetworkUsageNotify();
    }

    private async Task UpdateDevice(EditDeviceSubmitModel result)
    {
        if (editDevice is null) return;

        using IronNacDbContext db = await dbFactory.CreateDbContextAsync();

        if (result.Network is null && !result.NetworkGroup.IsPool) return;
        else if (result.Network is null)
        {
            result.Network = await db.Networks
                .Where(x => x.NetworkGroupId == result.NetworkGroup.Id)
                .Where(x => x.DeviceNetworks.Count < x.Capacity)
                .FirstOrDefaultAsync();
        }
        if (result.Network is null) return;

        editDevice.Authorized = true;
        editDevice.AuthorizedUntil = result.AuthorizeForever ? null : DateTime.UtcNow.AddDays(30);

        DeviceNetwork? oldDeviceNetwork = await db.DeviceNetworks
            .Where(x => x.Id == editDevice.DeviceNetwork.Id)
            .FirstOrDefaultAsync();
        if (oldDeviceNetwork is null) return;

        bool disconnect = false;
        if (oldDeviceNetwork.NetworkId != result.Network.Id)
        {
            db.Remove(oldDeviceNetwork);
            editDevice.DeviceNetwork = new()
            {
                Device = editDevice,
                Network = result.Network
            };

            disconnect = true;
        }

        db.Update(editDevice);
        await db.SaveChangesAsync();

        if (disconnect)
        {
            await disconnector.Disconnect(editDevice);
        }

        editDevice = null;
        dataRefresh.NetworkUsageNotify();
    }

    private async Task PreviousPage()
    {
        if (page <= 1) return;
        page--;
        await Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task NextPage()
    {
        if (page >= totalPages) return;
        page++;
        await Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task DoSearch()
    {
        await Refresh();
        await InvokeAsync(StateHasChanged);
    }
}
