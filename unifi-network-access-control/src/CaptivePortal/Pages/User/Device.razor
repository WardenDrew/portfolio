@page "/user/device"
@page "/user/device/{DeviceMac}"
@layout UserLayout
@using CaptivePortal.Components.Forms
@inject IDbContextFactory<IronNacDbContext> dbFactory
@inject NavigationManager nav
@inject RadiusDisconnectorService disconnector
@inject DataRefreshNotificationService dataRefresh

<PageTitle>User > Device</PageTitle>

@if (device is not null && AuthenticateUser?.AccessToken is not null)
{
    <form class="d-block w-100" @onsubmit="@(async _ => {await Debounce(); await UpdateDevice();})">
        <h5 class="mt-3">MAC Address</h5>
        <input class="d-block w-100" type="text" disabled value="@device.DeviceMac">
        
        <h5 class="mt-3">Nickname</h5>
        <input class="d-block w-100" type="text" @bind="device.NickName" />

        <h5 class="text-center mt-3">
            This device is authorized until<br />
            <code>@device.AuthorizedUntil</code>
        </h5>

        <h5 class="mt-3">Assigned Network</h5>

        <div class="px-3">
            @if (selectedNetworkGroup is null ||
                      (!selectedNetworkGroup.IsPool && selectedNetwork is null))
            {
                <h5 class="text-center mt-3 mb-0">Select Network</h5>

                <NetworkSelection 
                    ShowForUserId="@AuthenticateUser.AccessToken.UserId"
                    SelectedNetworkGroupChanged="SelectedNetworkGroupChanged"
                    SelectedNetworkChanged="SelectedNetworkChanged"
                />
            }
            else
            {
                <p class="mt-3">
                    Network Group: <code>@selectedNetworkGroup.Name</code><br/>
                    Network: <code>@selectedNetwork?.Name</code>
                </p>
                <button class="d-block w-100 btn btn-info" type="button" @onclick="@(_ => StartChangeNetwork())">Change Network</button>
            }
        </div>

        <div class="d-flex justify-content-end mt-3">
            <button class="d-block btn btn-primary" type="submit">Save</button>
            <button class="d-block btn btn-outline-secondary ms-2" type="button" @onclick="@(_ => nav.NavigateTo("/user"))">Cancel</button>
        </div>
        
    </form>
}

@code {
    [Parameter]
    public string? DeviceMac { get; set; }

    [CascadingParameter]
    public AuthenticateUser? AuthenticateUser { get; set; }

    private Database.Entities.Device? device;

    private NetworkGroup? selectedNetworkGroup;
    private Network? selectedNetwork;

    private bool debounce = true;
    public async Task Debounce()
    {
        debounce = true;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await Refresh();
        debounce = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Refresh()
    {
        if (AuthenticateUser?.AccessToken is null) { return; }

        if (string.IsNullOrWhiteSpace(DeviceMac))
        {
            nav.NavigateTo("/user/devices");
            return;
        }

        using IronNacDbContext db = await dbFactory.CreateDbContextAsync();

        device = await db.Devices
            .AsNoTracking()
            .Include(x => x.DeviceNetwork)
                .ThenInclude(x => x.Network)
                    .ThenInclude(x => x.NetworkGroup)
            .Where(x => x.UserId == AuthenticateUser.AccessToken.UserId)
            .Where(x => x.DeviceMac == DeviceMac)
            .FirstOrDefaultAsync();
        if (device is null)
        {
            nav.NavigateTo("/user/devices");
            return;
        }

        selectedNetwork = device.DeviceNetwork.Network;
        selectedNetworkGroup = device.DeviceNetwork.Network.NetworkGroup;
    }

    private void StartChangeNetwork()
    {
        this.selectedNetwork = null;
        this.selectedNetworkGroup = null;
        StateHasChanged();
    }

    private void SelectedNetworkGroupChanged(NetworkGroup? networkGroup)
    {
        this.selectedNetworkGroup = networkGroup;
        StateHasChanged();
    }

    private void SelectedNetworkChanged(Network? network)
    {
        this.selectedNetwork = network;
        StateHasChanged();
    }

    private async Task UpdateDevice()
    {
        if (device is null || selectedNetworkGroup is null) return;

        using IronNacDbContext db = await dbFactory.CreateDbContextAsync();

        if (selectedNetwork is null && !selectedNetworkGroup.IsPool) return;
        else if (selectedNetwork is null)
        {
            selectedNetwork = await db.Networks
                .Where(x => x.NetworkGroupId == selectedNetworkGroup.Id)
                .Where(x => x.DeviceNetworks.Count < x.Capacity)
                .FirstOrDefaultAsync();
        }
        if (selectedNetwork is null) return;

        bool disconnect = false;
        if (device.DeviceNetwork.NetworkId != selectedNetwork.Id)
        {
            db.Remove(device.DeviceNetwork);
            device.DeviceNetwork = new()
            {
                Device = device,
                Network = selectedNetwork
            };

            disconnect = true;
        }

        db.Update(device);
        await db.SaveChangesAsync();

        dataRefresh.NetworkUsageNotify();

        if (disconnect)
        {
            await disconnector.Disconnect(device);
        }

        nav.NavigateTo("/user");
    }

}
